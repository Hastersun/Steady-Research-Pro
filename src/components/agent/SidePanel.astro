<aside class="w-full lg:w-80 flex-shrink-0 space-y-6" id="side-panel" data-i18n-scope="sidePanel">
  <div class="glass-card rounded-2xl border border-white/12 px-5 py-6 text-slate-200">
    <h2 class="text-sm font-semibold tracking-[0.28em] text-slate-300 uppercase" data-i18n="sidePanel.title">AI 研究配置</h2>
    <form class="mt-4 space-y-4" id="config-form">
      <div>
        <label class="block text-xs font-medium text-slate-300 mb-1" data-i18n="sidePanel.topicLabel">研究主题</label>
        <input id="research-topic" type="text" class="w-full rounded-xl border border-white/10 bg-slate-900/60 px-3 py-2.5 text-sm text-slate-100 placeholder:text-slate-500 focus:border-brand-300 focus:ring-2 focus:ring-brand-400/60" data-i18n-attrPlaceholder="sidePanel.topicPlaceholder" placeholder="例如：大语言模型在教育领域的应用" />
      </div>
      <div>
        <label class="block text-xs font-medium text-slate-300 mb-1" data-i18n="sidePanel.modelLabel">选择 AI 模型</label>
        <select id="research-model" class="w-full rounded-xl border border-white/10 bg-slate-900/60 px-3 py-2.5 text-sm text-slate-100 focus:border-brand-300 focus:ring-2 focus:ring-brand-400/60">
          <option value="" data-i18n="sidePanel.modelLoading">加载中...</option>
        </select>
        <p id="provider-hint" class="mt-1 text-[11px] text-slate-400" data-i18n="sidePanel.modelConfigHint">使用 Settings 页面的当前服务配置</p>
      </div>
      <div>
        <label class="block text-xs font-medium text-slate-300 mb-1" data-i18n="sidePanel.depthLabel">深度级别</label>
        <select id="depth-level" class="w-full rounded-xl border border-white/10 bg-slate-900/60 px-3 py-2.5 text-sm text-slate-100 focus:border-brand-300 focus:ring-2 focus:ring-brand-400/60">
          <option value="basic" data-i18n="sidePanel.depthBasic">基础分析</option>
          <option value="standard" selected data-i18n="sidePanel.depthStandard">标准研究</option>
          <option value="deep" data-i18n="sidePanel.depthDeep">深度研究</option>
        </select>
      </div>
      <div>
        <label class="block text-xs font-medium text-slate-300 mb-1" data-i18n="sidePanel.focusLabel">研究重点</label>
        <textarea id="research-focus" rows="2" class="w-full rounded-xl border border-white/10 bg-slate-900/60 px-3 py-2.5 text-sm text-slate-100 placeholder:text-slate-500 focus:border-brand-300 focus:ring-2 focus:ring-brand-400/60" data-i18n-attrPlaceholder="sidePanel.focusPlaceholder" placeholder="描述特定的研究角度或关注点..."></textarea>
            <li class="before:content-[''] before:absolute before:-start-4 before:top-1.5 before:w-2 before:h-2 before:rounded-full before:${statusClass} relative" data-step="${step.id}">
      <div class="flex items-center justify-between pt-2">
        <button type="button" id="stop-btn" class="items-center gap-1.5 rounded-full bg-red-500/90 px-3.5 py-2 text-xs font-semibold text-white shadow hover:bg-red-400 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500/70 hidden" data-i18n="sidePanel.stop">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/><path stroke-linecap="round" stroke-linejoin="round" d="M9 10h6v4H9z"/></svg>
          停止
        </button>
        <button id="start-btn" type="submit" class="inline-flex items-center gap-1.5 rounded-full bg-gradient-to-r from-emerald-400/85 via-brand-400/80 to-sky-500/75 px-4 py-2 text-xs font-semibold text-slate-900 shadow hover:from-emerald-300 hover:to-sky-400 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-emerald-400/60" data-i18n="sidePanel.start">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" d="M13 10V3L4 14h7v7l9-11h-7z"/></svg>
          开始 AI 研究
        </button>
      </div>
    </form>
  </div>
  <div class="glass-card glass-card--muted rounded-2xl border border-white/12 px-5 py-6" id="progress-card">
    <h3 class="text-sm font-semibold tracking-[0.28em] text-slate-300 uppercase mb-4" data-i18n="sidePanel.progressTitle">进度</h3>
    <div class="mb-4">
      <div class="h-1.5 w-full overflow-hidden rounded-full border border-white/10 bg-white/10 relative">
        <div id="progress-bar" class="h-full w-0 bg-gradient-to-r from-brand-300 via-brand-400 to-sky-400 transition-all duration-500 ease-out"></div>
        <div class="absolute inset-0 bg-[linear-gradient(110deg,rgba(255,255,255,0)_0%,rgba(255,255,255,.6)_40%,rgba(255,255,255,0)_70%)] animate-shimmer pointer-events-none mix-blend-overlay"></div>
      </div>
      <div id="progress-meta" class="mt-1 text-[10px] font-medium tracking-wide text-slate-300/80 select-none" data-i18n="sidePanel.progressIdle">0% · 等待开始</div>
    </div>
    <ol id="progress-timeline" class="relative ms-4 space-y-5 text-slate-200/85" aria-live="polite"></ol>
  </div>
</aside>

<script>
  // @ts-nocheck
  // AI 研究功能集成
  let isResearching = false;
  let currentStream = null;
  let providerState = { provider: 'manual', config: null, models: [] };
  let syncRetryTimer = null;

  // 元素引用
  const researchTopic = document.getElementById('research-topic');
  const researchModel = document.getElementById('research-model');
  const depthLevel = document.getElementById('depth-level');
  const researchFocus = document.getElementById('research-focus');
  const startBtn = document.getElementById('start-btn');
  const stopBtn = document.getElementById('stop-btn');
  const progressBar = document.getElementById('progress-bar');
  const progressMeta = document.getElementById('progress-meta');
  const progressTimeline = document.getElementById('progress-timeline');
  const configForm = document.getElementById('config-form');
  const providerHint = document.getElementById('provider-hint');

  // 研究步骤配置
  const i18n = (window).__steadyI18n || {};
  const translate = (key, params, fallback) => {
    if (i18n && typeof i18n.t === 'function') {
      try {
        return i18n.t(key, params);
      } catch (error) {
        console.warn('[i18n] translate error', error);
      }
    }
    return fallback ?? key;
  };

  const researchSteps = [
    { id: 'plan', key: 'sidePanel.stepPlan', fallback: '生成研究计划', icon: '📋' },
    { id: 'search', key: 'sidePanel.stepSearch', fallback: '多源搜索', icon: '🔍' },
    { id: 'extract', key: 'sidePanel.stepExtract', fallback: '内容提取', icon: '📄' },
    { id: 'cluster', key: 'sidePanel.stepCluster', fallback: '主题聚类', icon: '🔗' },
    { id: 'synthesis', key: 'sidePanel.stepSynthesis', fallback: '综合分析', icon: '🧠' }
  ];

  function getSelectorInstance() {
    if (typeof window === 'undefined') return null;
    const globalAny = window as any;
    return typeof globalAny.getAIServiceSelector === 'function' ? globalAny.getAIServiceSelector() : null;
  }

  function scheduleSyncRetry() {
    if (typeof window === 'undefined') return;
    if (syncRetryTimer) {
      window.clearTimeout(syncRetryTimer);
    }
    syncRetryTimer = window.setTimeout(() => {
      syncRetryTimer = null;
      syncProviderState();
    }, 400);
  }

  function syncProviderState(detail) {
    let provider = 'manual';
    let config = null;
    let models = [];

    if (detail?.provider) {
      provider = detail.provider;
      config = detail.config || null;
      if (Array.isArray(detail.models)) {
        models = [...detail.models];
      } else if (Array.isArray(detail.config?.models)) {
        models = [...detail.config.models];
      }
    } else {
      const selector = getSelectorInstance();
      if (selector?.getCurrentProvider) {
        const state = selector.getCurrentProvider();
        if (state) {
          provider = state.provider;
          config = state.config || null;
          if (Array.isArray(state.models)) {
            models = [...state.models];
          } else if (Array.isArray(state.config?.models)) {
            models = [...state.config.models];
          }
        }
      }
    }

    if (!config) {
      providerState = { provider, config: null, models: [] };
      updateModelOptions();
      updateProviderHint();
      if (!detail) {
        scheduleSyncRetry();
      }
      return;
    }

    if (syncRetryTimer) {
      window.clearTimeout(syncRetryTimer);
      syncRetryTimer = null;
    }

    providerState = { provider, config, models };
    updateModelOptions();
    updateProviderHint();
  }

  function updateModelOptions() {
  const select = researchModel;
    if (!select) return;

    const models = Array.isArray(providerState.models) ? providerState.models : [];
    const fallbackModel = providerState.config?.model;

    select.innerHTML = '';

    if (models.length > 0) {
      const placeholder = document.createElement('option');
      placeholder.value = '';
      placeholder.textContent = translate('sidePanel.modelPlaceholder', {}, '请选择模型');
      select.appendChild(placeholder);

      models.forEach((model) => {
        const option = document.createElement('option');
        option.value = model;
        option.textContent = model;
        select.appendChild(option);
      });

      if (fallbackModel && models.includes(fallbackModel)) {
        select.value = fallbackModel;
      }
    } else if (fallbackModel) {
      const option = document.createElement('option');
      option.value = fallbackModel;
      option.textContent = fallbackModel;
      select.appendChild(option);
      select.value = fallbackModel;
    } else {
      const option = document.createElement('option');
      option.value = '';
      option.textContent = translate('sidePanel.providerMissing', {}, '请在 Settings 页面配置模型');
      select.appendChild(option);
      select.value = '';
    }

    select.disabled = models.length === 0 && !fallbackModel;
    if (i18n && typeof i18n.applyTranslations === 'function') {
      i18n.applyTranslations(select);
    }
  }

  function updateProviderHint() {
    if (providerHint) {
      if (!providerState.config) {
        providerHint.textContent = translate('sidePanel.providerMissing', {}, '当前没有配置 AI 服务，请先前往 Settings 设置。');
        providerHint.classList.remove('text-slate-400', 'text-emerald-300', 'text-amber-300', 'text-rose-400');
        providerHint.classList.add('text-rose-400');
      } else {
  const { name, available, model } = providerState.config;
        const statusKey = available ? 'sidePanel.providerStatusConnected' : 'sidePanel.providerStatusDisconnected';
        const statusText = translate(statusKey, {}, available ? '已连接' : '未连接');
        const modelText = model ? translate('sidePanel.providerStatusModelSuffix', { model }, ` · 模型：${model}`) : '';
        providerHint.textContent = translate('sidePanel.providerStatus', {
          name: name || providerState.provider,
          status: statusText,
          model: modelText
        }, `当前服务：${name || providerState.provider} · 状态：${statusText}${modelText}`);
        providerHint.classList.remove('text-slate-400', 'text-emerald-300', 'text-amber-300', 'text-rose-400');
        providerHint.classList.add(available ? 'text-emerald-300' : 'text-amber-300');
      }
    }

    if (startBtn) {
      if (isResearching) {
        startBtn.disabled = true;
      } else {
        const disabled = !providerState.config || !providerState.config.available;
        startBtn.disabled = disabled;
        startBtn.classList.toggle('opacity-50', disabled);
        startBtn.classList.toggle('cursor-not-allowed', disabled);
      }
    }
  }

  // 初始化
  function initResearchPanel() {
    setupEventListeners();
    renderTimeline();
    syncProviderState();
    if (i18n && typeof i18n.applyTranslations === 'function') {
      i18n.applyTranslations(document.getElementById('side-panel'));
    }
  }

  // 设置事件监听
  function setupEventListeners() {
    // 表单提交
    configForm?.addEventListener('submit', async (e) => {
      e.preventDefault();
      await startResearch();
    });

    // 停止按钮
    stopBtn?.addEventListener('click', () => {
      stopResearch();
    });

    window.addEventListener('aiProviderChanged', (event) => {
      const detail = event instanceof CustomEvent ? event.detail : undefined;
      syncProviderState(detail);
    });
  }

  // 渲染进度时间线
  function renderTimeline(activeStep = null) {
    if (!progressTimeline) return;

    progressTimeline.innerHTML = researchSteps.map((step, index) => {
      const isActive = activeStep === step.id;
      const isCompleted = activeStep && researchSteps.findIndex(s => s.id === activeStep) > index;
      
      let statusClass = 'bg-white/15';
      let textClass = 'text-slate-500';
      let status = '';

      if (isCompleted) {
        statusClass = 'bg-emerald-300';
        textClass = 'text-slate-200';
        status = translate('sidePanel.stepComplete', {}, '✓ 完成');
      } else if (isActive) {
        statusClass = 'bg-brand-300 animate-pulse';
        textClass = 'text-white';
        status = translate('sidePanel.stepRunning', {}, '🔄 进行中');
      }

      const labelText = translate(step.key, {}, step.fallback);
      return `
        <li class="before:content-[''] before:absolute before:-start-4 before:top-1.5 before:w-2 before:h-2 before:rounded-full before:${statusClass} relative" data-step="${step.id}">
          <div class="flex items-center gap-2">
            <span class="text-sm">${step.icon}</span>
            <p class="text-xs font-medium ${textClass}">${labelText}</p>
          </div>
          <p class="text-[10px] text-slate-400 mt-0.5">${status}</p>
        </li>
      `;
    }).join('');
  }

  if (i18n && typeof i18n.onLocaleChange === 'function') {
    i18n.onLocaleChange(() => {
      renderTimeline();
      updateProviderHint();
      updateModelOptions();
      if (!isResearching && progressMeta) {
        progressMeta.textContent = i18n.t?.('sidePanel.progressIdle') || '0% · 等待开始';
      }
    });
  }

  // 更新进度
  function updateProgress(progress, message) {
    if (progressBar) {
      progressBar.style.width = `${progress}%`;
    }
    if (progressMeta) {
      progressMeta.textContent = `${progress}% · ${message}`;
    }
  }

  // 开始研究
  async function startResearch() {
    const topic = (researchTopic as HTMLInputElement)?.value?.trim();
    const selectedModel = (researchModel as HTMLSelectElement)?.value;
    const fallbackModel = providerState.config?.model;
    const model = selectedModel || fallbackModel;
    
    if (!topic) {
      alert(translate('sidePanel.validationTopic', {}, '请输入研究主题'));
      return;
    }
    
    if (!providerState.config) {
      alert(translate('sidePanel.validationProvider', {}, '请先在 Settings 页面配置 AI 服务'));
      return;
    }

    if (!model) {
      alert(translate('sidePanel.validationModel', {}, '请选择或配置 AI 模型'));
      return;
    }

    if (!providerState.config.available) {
      alert(translate('sidePanel.validationOffline', {}, '当前 AI 服务未连接，请先在 Settings 页面测试连接'));
      return;
    }

    isResearching = true;
    updateUIForResearchState();
    
    // 触发研究开始事件，让 ResearchAgentUI 开始动画
    document.dispatchEvent(new CustomEvent('research:start'));

    const options = {
      depth: (depthLevel as HTMLSelectElement)?.value || 'standard',
      temperature: 0.7, // 固定温度值
      focus: (researchFocus as HTMLTextAreaElement)?.value?.trim()
    };

    try {
      const response = await fetch('/api/research-stream', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          query: topic,
          model: model,
          provider: providerState.provider,
          options: options
        })
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const reader = response.body?.getReader();
      const decoder = new TextDecoder();
      currentStream = reader as any;

      if (!reader) {
        throw new Error('无法获取响应流');
      }

      while (true) {
        const { value, done } = await reader.read();
        
        if (done) break;

        const chunk = decoder.decode(value);
        const lines = chunk.split('\n');

        for (const line of lines) {
          if (line.startsWith('data: ')) {
            const jsonStr = line.slice(6).trim();
            if (!jsonStr) continue; // 跳过空行
            
            try {
              const data = JSON.parse(jsonStr);
              
              if (data.error) {
                throw new Error(data.message || '研究过程中出现错误');
              }
              
              if (data.done) {
                completeResearch();
                return;
              }
              
              // 更新进度和时间线
              if (data.stepId && data.progress !== undefined) {
                updateProgress(data.progress, translate(data.messageKey || '', data.messageParams || {}, data.message || data.messageKey || ''));
                renderTimeline(data.stepId);
                
                // 更新推理面板和搜索日志
                if (data.data) {
                  updateReasoningPanel(data);
                }
              }
            } catch (e) {
              if (e instanceof SyntaxError) {
                console.warn('JSON 解析错误，跳过该行:', jsonStr);
                continue;
              }
              throw e;
            }
          }
        }
      }
    } catch (error) {
      console.error('研究过程失败:', error);
      alert(translate('sidePanel.researchFailed', { message: error.message }, `研究失败: ${error.message}`));
      stopResearch();
    }
  }

  // 停止研究
  function stopResearch() {
    isResearching = false;
    
    if (currentStream) {
      try {
        (currentStream as any).cancel?.();
      } catch (e) {
        console.log('Stream already closed');
      }
      currentStream = null;
    }
    
    updateUIForResearchState();
    updateProgress(0, translate('sidePanel.progressStopped', {}, '已停止'));
    renderTimeline();
  }

  // 完成研究
  function completeResearch() {
    isResearching = false;
    updateUIForResearchState();
    updateProgress(100, translate('sidePanel.progressCompleted', {}, '研究完成'));
    
    // 显示完成状态
    setTimeout(() => {
      updateProgress(0, translate('sidePanel.progressIdleLabel', {}, '等待开始'));
      renderTimeline();
    }, 3000);
  }

  // 更新UI状态
  function updateUIForResearchState() {
    if (startBtn && stopBtn) {
      if (isResearching) {
        startBtn.classList.add('hidden');
        stopBtn.classList.remove('hidden');
        stopBtn.classList.add('inline-flex');
      } else {
        startBtn.classList.remove('hidden');
        stopBtn.classList.add('hidden');
        stopBtn.classList.remove('inline-flex');
      }
    }
    updateProviderHint();
  }

  // 更新推理面板（与主界面的推理面板交互）
  function updateReasoningPanel(data) {
    // 触发自定义事件，让主界面处理
    const event = new CustomEvent('research-update', {
      detail: data
    });
    document.dispatchEvent(event);
  }

  // 启动初始化
  document.addEventListener('DOMContentLoaded', initResearchPanel);
  document.addEventListener('astro:page-load', () => syncProviderState());
</script>