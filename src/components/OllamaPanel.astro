---
// AI 服务控制面板组件 - 支持多种AI服务
---

<div class="bg-white/70 backdrop-blur rounded-xl shadow-soft border border-gray-100 p-6" id="ai-service-panel">
  <div class="flex items-center justify-between mb-4">
    <h2 class="text-lg font-semibold text-gray-900" id="panel-title">AI 服务控制台</h2>
    <div class="flex items-center gap-2">
      <div id="service-status" class="flex items-center gap-2 text-sm">
        <div class="w-2 h-2 rounded-full bg-gray-400" id="status-indicator"></div>
        <span class="text-gray-500" id="status-text">检查中...</span>
      </div>
      <button 
        id="refresh-service" 
        class="inline-flex items-center gap-1.5 rounded-md bg-gray-100 px-3 py-2 text-xs font-medium text-gray-700 hover:bg-gray-200"
      >
        <svg class="w-3 h-3" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"/>
        </svg>
        刷新
      </button>
    </div>
  </div>

  <!-- Ollama 模型管理区域 -->
  <div id="ollama-controls" class="space-y-4">
    <!-- 模型选择 -->
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-4">
      <div class="lg:col-span-1">
        <label class="block text-sm font-medium text-gray-700 mb-2">
          选择模型
        </label>
        <select 
          id="model-select" 
          class="w-full rounded-md border border-gray-300 bg-white px-3 py-2 text-sm text-gray-900 focus:border-brand-500 focus:ring-1 focus:ring-brand-500"
        >
          <option value="">加载中...</option>
        </select>
      </div>

      <div class="lg:col-span-1">
        <label class="block text-sm font-medium text-gray-700 mb-2">
          操作
        </label>
        <div class="flex gap-2">
          <button 
            id="pull-model-btn" 
            class="flex-1 inline-flex items-center justify-center gap-1.5 rounded-md bg-brand-600 px-3 py-2 text-xs font-medium text-white hover:bg-brand-700 focus:ring-2 focus:ring-brand-500 focus:ring-offset-1"
          >
            <svg class="w-3 h-3" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M9 19l3 3m0 0l3-3m-3 3V10"/>
            </svg>
            拉取模型
          </button>
        </div>
      </div>
    </div>
  </div>

  <!-- HTTP API 服务信息区域 -->
  <div id="http-api-info" class="hidden">
    <div class="bg-gradient-to-r from-blue-50 to-indigo-50 rounded-lg p-4">
      <div class="flex items-start justify-between">
        <div class="flex-1">
          <h3 class="text-sm font-medium text-gray-900 mb-2" id="api-service-name">云端API服务</h3>
          <div class="space-y-2 text-xs text-gray-600">
            <div class="flex items-center gap-2">
              <span class="font-medium">模型:</span>
              <span id="api-model-info">-</span>
            </div>
            <div class="flex items-center gap-2">
              <span class="font-medium">状态:</span>
              <span id="api-connection-status">-</span>
            </div>
          </div>
        </div>
        <div class="text-right">
          <button 
            id="test-api-connection"
            class="px-3 py-1 text-xs bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors"
          >
            测试连接
          </button>
        </div>
      </div>
    </div>
  </div>

  <!-- 拉取模型对话框 -->
  <div id="pull-modal" class="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 hidden">
    <div class="flex items-center justify-center min-h-screen p-4">
      <div class="bg-white rounded-lg shadow-xl w-full max-w-md">
        <div class="p-6">
          <h3 class="text-lg font-semibold text-gray-900 mb-4">拉取模型</h3>
          <div class="space-y-4">
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">
                模型名称
              </label>
              <input 
                type="text" 
                id="pull-model-input"
                placeholder="例如: llama3.2:latest"
                class="w-full rounded-md border border-gray-300 bg-white px-3 py-2 text-sm text-gray-900 focus:border-brand-500 focus:ring-1 focus:ring-brand-500"
              />
              <p class="text-xs text-gray-500 mt-1">
                常用模型: llama3.2, qwen2.5, gemma2, phi3
              </p>
            </div>
            <div id="pull-progress" class="hidden">
              <div class="w-full bg-gray-200 rounded-full h-2">
                <div id="pull-progress-bar" class="bg-brand-600 h-2 rounded-full transition-all duration-300" style="width: 0%"></div>
              </div>
              <p class="text-xs text-gray-500 mt-1" id="pull-status">准备中...</p>
            </div>
          </div>
          <div class="flex justify-end gap-2 mt-6">
            <button 
              id="cancel-pull"
              class="px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-100 rounded-md"
            >
              取消
            </button>
            <button 
              id="confirm-pull"
              class="px-4 py-2 text-sm font-medium text-white bg-brand-600 hover:bg-brand-700 rounded-md"
            >
              开始拉取
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  // AI 服务面板功能
  let currentProvider = 'ollama';
  let currentModel = '';
  let currentConfig = null;

  // 元素引用
  const statusIndicator = document.getElementById('status-indicator');
  const statusText = document.getElementById('status-text');
  const panelTitle = document.getElementById('panel-title');
  const modelSelect = document.getElementById('model-select');
  const refreshServiceBtn = document.getElementById('refresh-service');
  const pullModelBtn = document.getElementById('pull-model-btn');
  const ollamaControls = document.getElementById('ollama-controls');
  const httpApiInfo = document.getElementById('http-api-info');
  const apiServiceName = document.getElementById('api-service-name');
  const apiModelInfo = document.getElementById('api-model-info');
  const apiConnectionStatus = document.getElementById('api-connection-status');
  const testApiConnectionBtn = document.getElementById('test-api-connection');
  const pullModal = document.getElementById('pull-modal');
  const pullModelInput = document.getElementById('pull-model-input');
  const confirmPull = document.getElementById('confirm-pull');
  const cancelPull = document.getElementById('cancel-pull');
  const pullProgress = document.getElementById('pull-progress');
  const pullProgressBar = document.getElementById('pull-progress-bar');
  const pullStatus = document.getElementById('pull-status');

  // 初始化
  async function initAIServicePanel() {
    setupEventListeners();
    
    // 等待AI服务选择器初始化
    if ((window as any).getAIServiceSelector) {
      const selector = (window as any).getAIServiceSelector();
      if (selector) {
        const current = selector.getCurrentProvider();
        await switchToProvider(current.provider, current.config);
      }
    } else {
      // 默认使用Ollama
      await switchToProvider('ollama', { name: '本地Ollama', url: 'http://localhost:11434' });
    }
  }

  // 切换到指定的服务提供商
  async function switchToProvider(provider, config) {
    currentProvider = provider;
    currentConfig = config;

    // 更新面板标题和显示
    if (panelTitle) {
      panelTitle.textContent = `${config.name} 控制台`;
    }

    if (provider === 'ollama') {
      // 显示Ollama控制区域
      if (ollamaControls) ollamaControls.classList.remove('hidden');
      if (httpApiInfo) httpApiInfo.classList.add('hidden');
      
      await checkOllamaHealth();
      await loadOllamaModels();
    } else {
      // 显示HTTP API信息区域
      if (ollamaControls) ollamaControls.classList.add('hidden');
      if (httpApiInfo) httpApiInfo.classList.remove('hidden');
      
      updateHttpApiInfo(provider, config);
      await checkHttpApiStatus(provider);
    }
  }

  // 更新HTTP API信息显示
  function updateHttpApiInfo(provider, config) {
    if (apiServiceName) {
      apiServiceName.textContent = config.name;
    }
    
    if (apiModelInfo) {
      apiModelInfo.textContent = config.model || '默认模型';
    }
    
    if (apiConnectionStatus) {
      apiConnectionStatus.textContent = config.available ? '已连接' : '未连接';
      apiConnectionStatus.className = config.available ? 'text-green-600' : 'text-gray-500';
    }
  }

  // 检查HTTP API状态
  async function checkHttpApiStatus(provider) {
    try {
      updateStatus('检查中...', 'text-yellow-600', 'bg-yellow-500');
      
      const response = await fetch('/api/http-api');
      const data = await response.json();
      
      if (data.status && data.status[provider]) {
        const providerStatus = data.status[provider];
        if (providerStatus.hasApiKey && providerStatus.connected) {
          updateStatus('服务正常', 'text-green-600', 'bg-green-500');
          if (apiConnectionStatus) {
            apiConnectionStatus.textContent = '已连接';
            apiConnectionStatus.className = 'text-green-600';
          }
        } else {
          updateStatus('未配置', 'text-gray-600', 'bg-gray-400');
          if (apiConnectionStatus) {
            apiConnectionStatus.textContent = providerStatus.hasApiKey ? '配置错误' : '未配置';
            apiConnectionStatus.className = 'text-gray-500';
          }
        }
      } else {
        updateStatus('服务离线', 'text-red-600', 'bg-red-500');
      }
    } catch (error) {
      console.error('Check HTTP API status error:', error);
      updateStatus('检查失败', 'text-red-600', 'bg-red-500');
    }
  }

  // 检查 Ollama 服务健康状态
  async function checkOllamaHealth() {
    try {
      updateStatus('检查中...', 'text-yellow-600', 'bg-yellow-500');
      
      const response = await fetch('/api/ollama', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ action: 'health' })
      });
      
      const data = await response.json();
      if (data.healthy) {
        updateStatus('服务正常', 'text-green-600', 'bg-green-500');
      } else {
        updateStatus('服务离线', 'text-red-600', 'bg-red-500');
      }
    } catch (error) {
      updateStatus('服务离线', 'text-red-600', 'bg-red-500');
    }
  }

  // 更新状态显示
  function updateStatus(text, textClass, indicatorClass) {
    if (statusText) {
      statusText.textContent = text;
      statusText.className = `${textClass}`;
    }
    if (statusIndicator) {
      statusIndicator.className = `w-2 h-2 rounded-full ${indicatorClass}`;
    }
  }

  // 加载Ollama模型列表
  async function loadOllamaModels() {
    try {
      const response = await fetch('/api/ollama', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ action: 'models' })
      });
      
      const data = await response.json();
      if (data.success && modelSelect) {
        modelSelect.innerHTML = '';
        
        if (data.models.length === 0) {
          modelSelect.innerHTML = '<option value="">暂无模型</option>';
        } else {
          data.models.forEach((model) => {
            const option = document.createElement('option');
            option.value = model.name;
            option.textContent = model.name;
            modelSelect.appendChild(option);
          });
          
          if (currentModel && modelSelect) {
            (modelSelect as any).value = currentModel;
          }
        }
      }
    } catch (error) {
      if (modelSelect) {
        modelSelect.innerHTML = '<option value="">加载失败</option>';
      }
    }
  }

  // 测试API连接
  async function testApiConnection() {
    if (currentProvider === 'ollama') return;
    
    try {
      updateStatus('测试中...', 'text-yellow-600', 'bg-yellow-500');
      
      const response = await fetch('/api/http-api', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          message: 'Hello',
          provider: currentProvider
        })
      });
      
      if (response.ok) {
        updateStatus('连接成功', 'text-green-600', 'bg-green-500');
        if (apiConnectionStatus) {
          apiConnectionStatus.textContent = '已连接';
          apiConnectionStatus.className = 'text-green-600';
        }
      } else {
        updateStatus('连接失败', 'text-red-600', 'bg-red-500');
      }
    } catch (error) {
      updateStatus('连接错误', 'text-red-600', 'bg-red-500');
      console.error('API connection test failed:', error);
    }
  }

  // 设置事件监听器
  function setupEventListeners() {
    // 监听AI服务提供商切换
    window.addEventListener('aiProviderChanged', (event) => {
      const { provider, config } = (event as any).detail;
      switchToProvider(provider, config);
    });

    // 模型选择
    modelSelect?.addEventListener('change', (e) => {
      const target = e.target;
      if (target) {
        currentModel = (target as any).value;
      }
    });

    // 拉取模型按钮
    pullModelBtn?.addEventListener('click', () => {
      if (pullModal) pullModal.classList.remove('hidden');
    });

    // 取消拉取
    cancelPull?.addEventListener('click', () => {
      if (pullModal) pullModal.classList.add('hidden');
      if (pullProgress) pullProgress.classList.add('hidden');
    });

    // 确认拉取
    confirmPull?.addEventListener('click', pullModel);

    // 刷新服务
    refreshServiceBtn?.addEventListener('click', () => {
      if (currentProvider === 'ollama') {
        loadOllamaModels();
        checkOllamaHealth();
      } else {
        checkHttpApiStatus(currentProvider);
      }
    });

    // 测试API连接
    testApiConnectionBtn?.addEventListener('click', testApiConnection);
  }

  // 拉取模型
  async function pullModel() {
    const modelName = (pullModelInput as any)?.value?.trim();
    if (!modelName) {
      alert('请输入模型名称');
      return;
    }

    try {
      if (pullProgress) pullProgress.classList.remove('hidden');
      
      // 模拟拉取过程
      for (let i = 0; i <= 100; i += 10) {
        if (pullProgressBar) (pullProgressBar as any).style.width = `${i}%`;
        if (pullStatus) pullStatus.textContent = `拉取中... ${i}%`;
        await new Promise(resolve => setTimeout(resolve, 200));
      }

      if (pullStatus) pullStatus.textContent = '拉取完成';
      await loadOllamaModels();
      
      setTimeout(() => {
        if (pullModal) pullModal.classList.add('hidden');
        if (pullProgress) pullProgress.classList.add('hidden');
      }, 1000);
    } catch (error) {
      alert(`拉取模型失败: ${error}`);
    }
  }

  // 获取当前选择的服务信息
  function getCurrentService() {
    return {
      provider: currentProvider,
      config: currentConfig,
      model: currentProvider === 'ollama' ? currentModel : (currentConfig as any)?.model
    };
  }

  // 导出给其他组件使用
  (window as any).getAIServicePanel = () => ({
    getCurrentService,
    switchToProvider
  });

  // 页面加载时初始化
  document.addEventListener('DOMContentLoaded', initAIServicePanel);
</script>