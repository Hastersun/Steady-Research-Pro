---
// Ollama 控制面板组件
---

<div class="bg-white/70 backdrop-blur rounded-xl shadow-soft border border-gray-100 p-6">
  <div class="flex items-center justify-between mb-4">
    <h2 class="text-lg font-semibold text-gray-900">Ollama AI 控制台</h2>
    <div class="flex items-center gap-2">
      <div id="ollama-status" class="flex items-center gap-2 text-sm">
        <div class="w-2 h-2 rounded-full bg-gray-400" id="status-indicator"></div>
        <span class="text-gray-500" id="status-text">检查中...</span>
      </div>
      <button 
        id="refresh-models" 
        class="inline-flex items-center gap-1.5 rounded-md bg-gray-100 px-3 py-2 text-xs font-medium text-gray-700 hover:bg-gray-200"
      >
        <svg class="w-3 h-3" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"/>
        </svg>
        刷新
      </button>
    </div>
  </div>

  <!-- 模型选择 -->
  <div class="grid grid-cols-1 lg:grid-cols-3 gap-4 mb-6">
    <div class="lg:col-span-1">
      <label class="block text-sm font-medium text-gray-700 mb-2">
        选择模型
      </label>
      <select 
        id="model-select" 
        class="w-full rounded-md border border-gray-300 bg-white px-3 py-2 text-sm text-gray-900 focus:border-brand-500 focus:ring-1 focus:ring-brand-500"
      >
        <option value="">加载中...</option>
      </select>
    </div>
    
    <div class="lg:col-span-1">
      <label class="block text-sm font-medium text-gray-700 mb-2">
        温度 (创造性)
      </label>
      <input 
        type="range" 
        id="temperature-slider" 
        min="0" 
        max="1" 
        step="0.1" 
        value="0.7"
        class="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer"
      />
      <div class="text-xs text-gray-500 mt-1">
        当前: <span id="temperature-value">0.7</span>
      </div>
    </div>

    <div class="lg:col-span-1">
      <label class="block text-sm font-medium text-gray-700 mb-2">
        操作
      </label>
      <div class="flex gap-2">
        <button 
          id="pull-model-btn" 
          class="flex-1 inline-flex items-center justify-center gap-1.5 rounded-md bg-brand-600 px-3 py-2 text-xs font-medium text-white hover:bg-brand-700 focus:ring-2 focus:ring-brand-500 focus:ring-offset-1"
        >
          <svg class="w-3 h-3" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M9 19l3 3m0 0l3-3m-3 3V10"/>
          </svg>
          拉取模型
        </button>
      </div>
    </div>
  </div>

  <!-- 快速测试区 -->
  <div class="border-t border-gray-200 pt-4">
    <label class="block text-sm font-medium text-gray-700 mb-2">
      快速测试
    </label>
    <div class="flex gap-2">
      <input 
        type="text" 
        id="test-prompt" 
        placeholder="输入测试提示词..."
        class="flex-1 rounded-md border border-gray-300 bg-white px-3 py-2 text-sm text-gray-900 focus:border-brand-500 focus:ring-1 focus:ring-brand-500"
      />
      <button 
        id="test-generate" 
        class="inline-flex items-center gap-1.5 rounded-md bg-brand-600 px-4 py-2 text-sm font-medium text-white hover:bg-brand-700 focus:ring-2 focus:ring-brand-500 focus:ring-offset-1"
      >
        <svg class="w-4 h-4" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" d="M13 10V3L4 14h7v7l9-11h-7z"/>
        </svg>
        生成
      </button>
    </div>
  </div>

  <!-- 输出区域 -->
  <div id="test-output" class="mt-4 p-4 bg-gray-50 rounded-lg border border-gray-200 hidden">
    <div class="flex items-center justify-between mb-2">
      <h4 class="text-sm font-medium text-gray-700">输出结果</h4>
      <button 
        id="clear-output"
        class="text-xs text-gray-500 hover:text-gray-700"
      >
        清空
      </button>
    </div>
    <div id="output-content" class="text-sm text-gray-900 whitespace-pre-wrap min-h-[60px] max-h-60 overflow-y-auto"></div>
    <div id="output-loading" class="hidden">
      <div class="flex items-center gap-2 text-sm text-gray-500">
        <div class="w-4 h-4 border-2 border-brand-500 border-t-transparent rounded-full animate-spin"></div>
        生成中...
      </div>
    </div>
  </div>

  <!-- 拉取模型对话框 -->
  <div id="pull-modal" class="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 hidden">
    <div class="flex items-center justify-center min-h-screen p-4">
      <div class="bg-white rounded-lg shadow-xl w-full max-w-md">
        <div class="p-6">
          <h3 class="text-lg font-semibold text-gray-900 mb-4">拉取模型</h3>
          <div class="space-y-4">
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">
                模型名称
              </label>
              <input 
                type="text" 
                id="pull-model-input"
                placeholder="例如: llama3.2:latest"
                class="w-full rounded-md border border-gray-300 bg-white px-3 py-2 text-sm text-gray-900 focus:border-brand-500 focus:ring-1 focus:ring-brand-500"
              />
              <p class="text-xs text-gray-500 mt-1">
                常用模型: llama3.2, qwen2.5, gemma2, phi3
              </p>
            </div>
            <div id="pull-progress" class="hidden">
              <div class="w-full bg-gray-200 rounded-full h-2">
                <div id="pull-progress-bar" class="bg-brand-600 h-2 rounded-full transition-all duration-300" style="width: 0%"></div>
              </div>
              <p class="text-xs text-gray-500 mt-1" id="pull-status">准备中...</p>
            </div>
          </div>
          <div class="flex justify-end gap-2 mt-6">
            <button 
              id="cancel-pull"
              class="px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-100 rounded-md"
            >
              取消
            </button>
            <button 
              id="confirm-pull"
              class="px-4 py-2 text-sm font-medium text-white bg-brand-600 hover:bg-brand-700 rounded-md"
            >
              开始拉取
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  // 导入 Ollama API
  import('/src/lib/ollama-api.js').then(module => {
    const ollamaAPI = new module.default();

    // 元素引用
    const statusIndicator = document.getElementById('status-indicator');
    const statusText = document.getElementById('status-text');
    const modelSelect = document.getElementById('model-select');
    const refreshModelsBtn = document.getElementById('refresh-models');
    const temperatureSlider = document.getElementById('temperature-slider');
    const temperatureValue = document.getElementById('temperature-value');
    const testPrompt = document.getElementById('test-prompt');
    const testGenerate = document.getElementById('test-generate');
    const testOutput = document.getElementById('test-output');
    const outputContent = document.getElementById('output-content');
    const outputLoading = document.getElementById('output-loading');
    const clearOutput = document.getElementById('clear-output');
    const pullModelBtn = document.getElementById('pull-model-btn');
    const pullModal = document.getElementById('pull-modal');
    const pullModelInput = document.getElementById('pull-model-input');
    const confirmPull = document.getElementById('confirm-pull');
    const cancelPull = document.getElementById('cancel-pull');
    const pullProgress = document.getElementById('pull-progress');
    const pullProgressBar = document.getElementById('pull-progress-bar');
    const pullStatus = document.getElementById('pull-status');

    // 状态管理
    let currentModel = '';
    let isGenerating = false;

    // 初始化
    async function init() {
      await checkHealth();
      await loadModels();
      setupEventListeners();
    }

    // 检查服务状态
    async function checkHealth() {
      try {
        const isHealthy = await ollamaAPI.checkHealth();
        updateStatus(isHealthy);
      } catch (error) {
        updateStatus(false);
      }
    }

    // 更新状态显示
    function updateStatus(isHealthy) {
      if (isHealthy) {
        statusIndicator.className = 'w-2 h-2 rounded-full bg-green-500';
        statusText.textContent = '服务正常';
        statusText.className = 'text-green-600';
      } else {
        statusIndicator.className = 'w-2 h-2 rounded-full bg-red-500';
        statusText.textContent = '服务离线';
        statusText.className = 'text-red-600';
      }
    }

    // 加载模型列表
    async function loadModels() {
      try {
        const models = await ollamaAPI.getModels();
        modelSelect.innerHTML = '';
        
        if (models.length === 0) {
          modelSelect.innerHTML = '<option value="">暂无模型</option>';
          return;
        }

        models.forEach(model => {
          const option = document.createElement('option');
          option.value = model.name;
          option.textContent = `${model.name} (${(model.size / 1024 / 1024 / 1024).toFixed(1)}GB)`;
          modelSelect.appendChild(option);
        });

        if (models.length > 0) {
          currentModel = models[0].name;
          modelSelect.value = currentModel;
        }
      } catch (error) {
        console.error('加载模型失败:', error);
        modelSelect.innerHTML = '<option value="">加载失败</option>';
      }
    }

    // 设置事件监听器
    function setupEventListeners() {
      // 温度滑块
      temperatureSlider?.addEventListener('input', (e) => {
        temperatureValue.textContent = e.target.value;
      });

      // 模型选择
      modelSelect?.addEventListener('change', (e) => {
        currentModel = e.target.value;
      });

      // 刷新模型
      refreshModelsBtn?.addEventListener('click', () => {
        loadModels();
        checkHealth();
      });

      // 测试生成
      testGenerate?.addEventListener('click', async () => {
        const prompt = testPrompt?.value?.trim();
        if (!prompt || !currentModel || isGenerating) return;

        await generateTest(prompt);
      });

      // 回车键快速生成
      testPrompt?.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' && !e.shiftKey) {
          e.preventDefault();
          testGenerate?.click();
        }
      });

      // 清空输出
      clearOutput?.addEventListener('click', () => {
        outputContent.textContent = '';
        testOutput.classList.add('hidden');
      });

      // 拉取模型
      pullModelBtn?.addEventListener('click', () => {
        pullModal.classList.remove('hidden');
      });

      cancelPull?.addEventListener('click', () => {
        pullModal.classList.add('hidden');
        pullProgress.classList.add('hidden');
      });

      confirmPull?.addEventListener('click', async () => {
        const modelName = pullModelInput?.value?.trim();
        if (!modelName) return;

        await pullModel(modelName);
      });

      // 点击模态框外部关闭
      pullModal?.addEventListener('click', (e) => {
        if (e.target === pullModal) {
          cancelPull?.click();
        }
      });
    }

    // 测试生成
    async function generateTest(prompt) {
      if (!currentModel) {
        alert('请先选择一个模型');
        return;
      }

      isGenerating = true;
      if (testGenerate) (testGenerate as HTMLButtonElement).disabled = true;
      testOutput?.classList.remove('hidden');
      if (outputContent) outputContent.textContent = '';
      outputLoading?.classList.remove('hidden');

      const temperature = parseFloat(temperatureSlider?.value || '0.7');

      try {
        await ollamaAPI.generateStream(
          currentModel,
          prompt,
          (chunk, done, error) => {
            if (error) {
              if (outputContent) outputContent.textContent = `错误: ${error.message}`;
              outputLoading?.classList.add('hidden');
              return;
            }

            if (!done) {
              if (outputContent) outputContent.textContent += chunk;
            } else {
              outputLoading?.classList.add('hidden');
              isGenerating = false;
              if (testGenerate) (testGenerate as HTMLButtonElement).disabled = false;
            }
          },
          { temperature }
        );
      } catch (error) {
        if (outputContent) outputContent.textContent = `生成失败: ${error.message}`;
        outputLoading?.classList.add('hidden');
        isGenerating = false;
        if (testGenerate) (testGenerate as HTMLButtonElement).disabled = false;
      }
    }

    // 拉取模型
    async function pullModel(modelName) {
      pullProgress?.classList.remove('hidden');
      if (confirmPull) (confirmPull as HTMLButtonElement).disabled = true;
      if (pullStatus) pullStatus.textContent = '开始拉取...';
      
      try {
        await ollamaAPI.pullModel(modelName, (progress) => {
          if (pullProgressBar) pullProgressBar.style.width = `${progress}%`;
          if (pullStatus) pullStatus.textContent = `拉取中... ${progress}%`;
        });

        if (pullStatus) pullStatus.textContent = '拉取完成！';
        setTimeout(() => {
          pullModal?.classList.add('hidden');
          pullProgress?.classList.add('hidden');
          loadModels(); // 重新加载模型列表
        }, 1500);
      } catch (error) {
        if (pullStatus) pullStatus.textContent = `拉取失败: ${error.message}`;
      } finally {
        if (confirmPull) (confirmPull as HTMLButtonElement).disabled = false;
      }
    }

    // 启动初始化
    init();
  });
</script>