---
// 搜索配置和测试组件
---

<div class="settings-panel search-config-panel">
  <header class="panel-header">
    <div class="header-meta">
      <span class="badge-soft">Search Orchestration</span>
      <div class="title">
        <h3>搜索引擎 API 配置</h3>
        <p>配置 Bing / Google 密钥并验证检索与研究链路</p>
      </div>
    </div>
    <span id="config-status" class="status-indicator">待配置</span>
  </header>

  <div class="config-grid">
    <section class="config-card" aria-labelledby="api-config-title">
      <header class="config-card__header">
        <div>
          <h4 id="api-config-title">API 密钥管理</h4>
          <p>保存后会将配置缓存在浏览器本地存储中</p>
        </div>
      </header>
      <div class="config-card__body">
        <div class="field">
          <label for="bing-key">Bing API 密钥</label>
          <input type="password" id="bing-key" class="input-control" placeholder="输入 Bing Search API 密钥" />
        </div>
        <div class="field">
          <label for="google-key">Google API 密钥</label>
          <input type="password" id="google-key" class="input-control" placeholder="输入 Google Custom Search API 密钥" />
        </div>
        <div class="field">
          <label for="google-cse">Google CSE ID</label>
          <input type="text" id="google-cse" class="input-control" placeholder="输入 Google Custom Search Engine ID" />
        </div>
      </div>
      <footer class="config-card__footer">
        <button id="save-config" class="action-button primary">保存配置</button>
      </footer>
    </section>

    <section class="config-card" aria-labelledby="search-test-title">
      <header class="config-card__header">
        <div>
          <h4 id="search-test-title">搜索测试</h4>
          <p>校验外部检索服务是否已就绪</p>
        </div>
      </header>
      <div class="config-card__body">
        <div class="field">
          <label for="search-query">测试查询</label>
          <input type="text" id="search-query" class="input-control" placeholder="输入搜索查询" value="人工智能发展趋势" />
        </div>
        <div class="toggle-group">
          <label class="toggle-item">
            <input type="checkbox" id="use-bing" checked />
            <span>Bing</span>
          </label>
          <label class="toggle-item">
            <input type="checkbox" id="use-google" checked />
            <span>Google</span>
          </label>
        </div>
      </div>
      <footer class="config-card__footer">
        <button id="test-search" class="action-button">测试搜索</button>
      </footer>
    </section>
  </div>

  <section class="config-card full" id="search-results" style="display: none;">
    <header class="config-card__header">
      <div>
        <h4>搜索结果</h4>
        <p>展示最近一次搜索测试的聚合结果</p>
      </div>
    </header>
    <div id="results-container" class="results-container"></div>
  </section>
</div>

<script type="module">
// @ts-nocheck
import { SearchAPIClient } from '../lib/search-api-client.js';

(() => {
  'use strict';

  const STORAGE_KEY = 'steady-research-pro:search-config';
  const CONFIG_PING_QUERY = '__search_config__';
  const storage = typeof window !== 'undefined' ? window.localStorage : null;

  const computeConfigured = (config = {}) =>
    Boolean(config.bing) || Boolean(config.google && config.googleCseId);

  const buildConfiguredMessage = (configured, fallback = '配置保存成功!') => {
    if (!configured) return fallback;
    const parts = [];
    if (configured.bing) parts.push('Bing ✓');
    if (configured.google) parts.push('Google ✓');
    return parts.length ? `已连接: ${parts.join(' / ')}` : fallback;
  };

  const readStoredConfig = () => {
    if (!storage) return null;
    try {
      const raw = storage.getItem(STORAGE_KEY);
      return raw ? JSON.parse(raw) : null;
    } catch (error) {
      console.warn('读取搜索配置失败:', error);
      return null;
    }
  };

  const writeStoredConfig = (config) => {
    if (!storage) return;
    try {
      storage.setItem(STORAGE_KEY, JSON.stringify(config));
    } catch (error) {
      console.warn('保存搜索配置失败:', error);
    }
  };

  const el = (id) => document.getElementById(id);
  const refs = {
    inputs: {
      bingKey: el('bing-key'),
      googleKey: el('google-key'),
      googleCse: el('google-cse'),
      searchQuery: el('search-query')
    },
    toggles: {
      bing: el('use-bing'),
      google: el('use-google')
    },
    buttons: {
      saveConfig: el('save-config'),
      testSearch: el('test-search')
    },
    sections: {
      searchResults: el('search-results'),
      resultsContainer: el('results-container')
    },
    status: el('config-status')
  };

  const searchClient = new SearchAPIClient();
  let isConfigured = false;
  let cachedConfig = null;

  const getValue = (input) => (input && typeof input.value === 'string' ? input.value.trim() : '');
  const setDisabled = (node, state) => { if (node) node.disabled = !!state; };
  const toggle = (node, show) => { if (node) node.style.display = show ? 'block' : 'none'; };

  function showStatus(message, type = '') {
    if (!refs.status) return;
    refs.status.textContent = message || '待配置';
    refs.status.className = `status-indicator ${type}`.trim();
    if (type === 'success' || type === 'error') {
      setTimeout(() => {
        if (refs.status) {
          refs.status.textContent = '待配置';
          refs.status.className = 'status-indicator';
        }
      }, 3000);
    }
  }

  const getSelectedEngines = () =>
    Object.entries(refs.toggles)
      .filter(([, checkbox]) => checkbox?.checked)
      .map(([engine]) => engine);

  function hydrateFromConfig(config) {
    if (!config) return;
    cachedConfig = config;

    if (refs.inputs.bingKey && config.bing) refs.inputs.bingKey.value = config.bing;
    if (refs.inputs.googleKey && config.google) refs.inputs.googleKey.value = config.google;
    if (refs.inputs.googleCse && config.googleCseId) refs.inputs.googleCse.value = config.googleCseId;

    if (Array.isArray(config.engines)) {
      Object.entries(refs.toggles).forEach(([engine, checkbox]) => {
        if (Array.isArray(config.engines)) {
          Object.entries(refs.toggles).forEach(([engine, checkbox]) => {
            checkbox.checked = config.engines.includes(engine);
          });
        }
      }

      function collectConfig() {
        return {
          bing: getValue(refs.inputs.bingKey),
          google: getValue(refs.inputs.googleKey),
          googleCseId: getValue(refs.inputs.googleCse),
          engines: getSelectedEngines()
        };
      }

      function saveConfig() {
        const config = collectConfig();
        writeStoredConfig(config);
        hydrateFromConfig(config);
        showStatus('配置保存成功!', 'success');
      }

      async function testSearch() {
        const config = collectConfig();
        if (!config.engines.length) {
          showStatus('请至少选择一个搜索引擎', 'error');
          return;
        }
        const query = getValue(refs.inputs.searchQuery);
        if (!query) {
          showStatus('请输入搜索查询', 'error');
          return;
        }
        showStatus('正在发起搜索...', '');
        setDisabled(refs.buttons.testSearch, true);
        try {
          const results = await searchClient.testSearch({
            ...config,
            query
          });
          renderResults(results);
          showStatus(`搜索完成，共返回 ${results.length} 条结果`, 'success');
        } catch (error) {
          showStatus(`搜索失败: ${error.message}`, 'error');
        } finally {
          setDisabled(refs.buttons.testSearch, false);
        }
      }

      function renderResults(results) {
        const container = refs.sections.resultsContainer;
        if (!container) return;
        container.innerHTML = '';
        if (!results || !results.length) {
          container.innerHTML = '<div class="text-slate-400 py-6 text-center">暂无结果</div>';
          toggle(refs.sections.searchResults, true);
          return;
        }
        const html = results.map((item) => `
          <div class="result-item border-b border-white/10 py-3">
            <div class="font-semibold text-slate-100">${item.title || '无标题'}</div>
            <div class="text-xs text-slate-400 mt-1">${item.snippet || ''}</div>
            <div class="text-xs text-slate-500 mt-1">${item.link ? `<a href="${item.link}" target="_blank" class="text-brand-400 underline">访问</a>` : ''}</div>
          </div>
        `).join('');
        container.innerHTML = html;
        toggle(refs.sections.searchResults, true);
      }

      function init() {
        const stored = readStoredConfig();
        hydrateFromConfig(stored);
        refs.buttons.saveConfig?.addEventListener('click', saveConfig);
        refs.buttons.testSearch?.addEventListener('click', testSearch);
      }

      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', init);
      } else {
        init();
      }

    })();